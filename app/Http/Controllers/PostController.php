<?php

namespace App\Http\Controllers;

use App\Models\Category;
use App\Models\Post;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;

class PostController extends Controller
{

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.
     */

    public function allDrafts()
    {
        $allDrafts = Post::where('status' , 0)->paginate(50);
        return view('admin.post.drafts', compact('allDrafts'));
    }
    public function allPosts()
    {
        $allposts = Post::where('status', 1)->paginate(100);
        return view('admin.post.allPost', compact('allposts'));
    }
    public function makePublic($postId)
    {   $post = Post::findOrFail($postId);
        $post->update(['status' => 1]);
        return redirect()->back()->with('alert', '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ üéâ');
    }
    public function makeDraft($postId)
    {   $post = Post::findOrFail($postId);
        $post->update(['status' => 0]);
        return redirect()->back()->with('alert', '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ üéÅ');
    }
    public function tempDelete($postId)
    {   $post = Post::findOrFail($postId);
        $post->update(['status' => 2]);
        return redirect()->back()->with('alert', 'üöÆ –ó–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É üöÆ');
    }
    public function permanentDelete($postId)
    {   $post = Post::findOrFail($postId);
        $post->delete();
        return redirect()->back()->with('alert', 'üóë –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ üóë');
    }

    // recycle post page

    public function openRecyclePostPage (Request $request)
    {
        $allposts = Post::where('status', 2)->paginate(20);
        return view('admin.recycle.post', compact('allposts'));
    } 
    /**
     * Show the form for creating a new resource.
     */

    public function createPost()
    {
        $data = Category::all();
        return view('admin.post.createPost', compact('data'));
    }

    public function createNewPost(Request $req)
    {
        $data = $req->validate([
            "title"=>"nullable",
            "date"=>"nullable",
            "video_type"=>"nullable",
            'category_id' => 'nullable|exists:categories,id',
            'movie_info' => 'nullable', // –ó–∞–≥—Ä—É–∑–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–µ
            'screenshots' => 'nullable', // –ó–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –æ –∑–∞–ø–∏—Å–µ
            'download_description' => 'required',
            "thumbnail"=>"nullable|image|mimes:jpeg,png,gif,svg",
            "meta_title"=>"nullable",
            "meta_description"=>"nullable",
            "meta_keywords"=>"nullable",
        ]);

        // for thumbnail 
        if($req->hasFile('thumbnail')){
            $imageName = time() . '.' . $req->thumbnail->getClientOriginalExtension();
            $req->thumbnail->move(public_path('/thumbnails'), $imageName);
            $data['thumbnail']=$imageName;
        }

        // if($data['screenshots']){
        //     $description = $data['screenshots'];

        //     $dom = new \DomDocument();
        //     libxml_use_internal_errors(true); // Suppress any potential HTML parsing errors
        //     $dom->loadHtml($description, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
    
        //     $images = $dom->getElementsByTagName('img');
    
        //     foreach ($images as $key => $img) {
        //         $imageData = base64_decode(explode(',', explode(';', $img->getAttribute('src'))[1])[1]);
        //         $image_name = "/upload/" . time() . $key . '.png';
        //         file_put_contents(public_path() . $image_name, $imageData);
    
        //         $img->removeAttribute('src');
        //         $img->setAttribute('src', $image_name);
        //     }
    
        //     $description = $dom->saveHTML();
        //     $data['screenshots'] = $description;
        // }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è

        $screenshots = $data['screenshots'];
        $dom = new \DomDocument();
        libxml_use_internal_errors(true); // –ü–æ–¥–∞–≤–ª—è–µ–º–∞—è –ª—é–±—ã–º–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∞–º–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ HTML
        $dom->loadHtml($screenshots, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);

        $images = $dom->getElementsByTagName('img');

        foreach ($images as $index => $image) {
            $imageSrc  = $image->getAttribute('src');
            list($type, $imageSrc ) = explode(';', $imageSrc );
            list(, $imageSrc ) = explode(',', $imageSrc );
            $imageData = base64_decode($imageSrc );

            $image_name = "/upload/" . time() . Str::random(10) . '.png';
            Storage::disk('public')->put($image_name, $imageData);

            $image->removeAttribute('src');
            $image->setAttribute('src', asset('storage' . $image_name));
        }

        $screenshots = $dom->saveHTML();
        $data['screenshots'] = $screenshots;
        Post::create($data);
        return redirect()->route('post.all')->with("success","–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");

    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
     */
    public function editPost($id)
    {   
        
        $data = Post::where('id', $id)->first();
        $cats = Category::all();
        return view('admin.post.editPost', compact('data', 'cats'));
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.
     */
    public function updatePost(Request $request, $id)
    {
        $data = $request->validate([
            "title" => "nullable",
            "date" => "nullable",
            "video_type" => "nullable",
            'category_id' => 'nullable|exists:categories,id',
            'movie_info' => 'nullable',
            'screenshots' => 'nullable', // Ensure screenshots field is nullable
            'download_description' => 'required',
            "thumbnail" => "nullable|image|mimes:jpeg,png,gif,svg",
            "meta_title" => "nullable",
            "meta_description" => "nullable",
            "meta_keywords" => "nullable",
        ]);
    
        $post = Post::findOrFail($id);
    
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä
        if ($request->hasFile('thumbnail')) {
            $existingImage = $post->thumbnail;
            $imagePath = public_path('/thumbnails' . '/' . $existingImage);
    
            if (file_exists($imagePath)) {
                unlink($imagePath);
            }
    
            $imageName = time() . '.' . $request->thumbnail->getClientOriginalExtension();
            $request->thumbnail->move(public_path('/thumbnails'), $imageName);
            $data['thumbnail'] = $imageName;
        }
    
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        if (isset($data['screenshots'])) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–µ screenshots (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã/—Ñ–æ—Ç–æ)
            if ($data['screenshots']) {
                $screenshots = $data['screenshots'];

                $dom = new \DomDocument();
                libxml_use_internal_errors(true); // –ü–æ–¥–∞–≤–ª—è–µ–º—ã–µ –ª—é–±—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ HTML
                $dom->loadHtml($screenshots, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
        
                $images = $dom->getElementsByTagName('img');
    
                foreach ($images as $index => $image) {
                    if(strpos($image->getAttribute('src'),'data:image/') ===0){
                        $imageSrc = $image->getAttribute('src');
                        list($type, $imageSrc) = explode(';', $imageSrc);
                        list(, $imageSrc) = explode(',', $imageSrc);
                        $imageData = base64_decode($imageSrc);
        
                        $image_name = 'upload/' . time() . Str::random(10) . '.png';
                        Storage::disk('public')->put($image_name, $imageData);
        
                        $image->removeAttribute('src');
                        $image->setAttribute('src', asset('storage/' . $image_name));
                    }
                    
                }
    
                $screenshots = $dom->saveHTML();
                $data['screenshots'] = $screenshots;
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—É—Å—Ç–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ null –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                $data['screenshots'] = null; // –ò–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π —Å–∞–π—Ç–∞
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–µ –Ω–µ –∑–∞–¥–∞–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ null –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            $data['screenshots'] = null; // –ò–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π —Å–∞–π—Ç–∞
        }
    
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $post->update($data);
    
        return redirect()->back()->with('alert', 'Post Updated Successfully');
    }
    

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.
     */
    public function edit(Post $post)
    {
        //
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
     */
    public function update(Request $request, Post $post)
    {
        //
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
     */
    public function destroy(Post $post)
    {
        //
    }
}